GIT-ensitutustuminen


1. Harjoituksen aihe: Git-versionhallintajärjestelmänä.

Ohjelmoinnissa tai missä tahansa muussakin hommassa varmuuskopinointi
ja oikean editoitavan version hallinta on tärkeää. Etenkin tämä korostuu
tilanteissa, joissa usea ihminen editoi vastaavaa tekstiä. Yksi vanhimmista
mutta edelleen käytetyimmistä "version hallintajärjestelmistä"
on Git ja siihen liittyvä verkoalusta www.github.com.

Tässä testissä kuvataan tutustumista Gittiin, sen asentamiseen ja
peruskäyttöön. Luomme harjoituksena repositoryn ja tallannemme sinne tämän tiedoston. Lopussa on linkki harjoituksena tehtyyn git-reposetoryyn.

Lähteenä tekstissä
on käytetty The Git Book -opaskirjaa (https://git-scm.com/book) ellei toisin
mainita.

2. Gitin toiminta lyhyesti

Git on tapa seurata valituissa tiedostoissa tehdyistä muutoksista. Tarvittaessa Git voi palauttaa tiedoston aiempaan versioon. Git mahdollistaa yhteistyön eri sisällöntuottajien kesken siten, jokainen käsittelee tiedostoa omalla laitteellaan.

Git luo valituista tiedostoista erillisen hakemistotiedoston (.git), joka sijaitsee valitussa tiedostokansiossa. Tätä seurantatiedostoa kutsutaan repositoryksi (repository) ja se voidaan jakaa verkkoon, paikalliselle palvelimelle tai pitää paikallisena seurattujen tiedostojen yhteydessä.

Tällaista järjestelmää kutsutaan versiokontrollijärjestelmäksi tai VCS:si. Kirjaimet tulevat sanoista Version Controll System. Gitistä voi lisäksi todeta sen olevan hajautettu (distributed), eli jokaisesta eri laitteella sijaitsevasta repositoryn "kloonista" voidaan tarvittaessa palauttaa koko repository.

Versiokontrolli mahdollistaa tiedostojen palauttamisen aikaisempaan tilaan, mikäli niissä ilmenee korjattavaa. Git tukee myös oksautumista (branching), jolla tarkoitetaan mahdollisuutta luoda erilaisia "oksastoja" tiedostoista. Oksia ei tässä tekstissä esitellä, sillä ne ovat hieman monimutkaisempia asioita, joista kirjoittajalla ei vielä ole kokemusta.

Git näkee tiedostoja kolmessa eri tilassa.
    a. Kun niihin on tehnyt muutos mutta niitä ei ole vielä
       valittu valokuvattavaksi (tiedoston tila: modified)
    b. Kun ne on valittu tallennettavaksi (tiedostn tila: staged)
    c. Kun ne on siirretty osasi .git-hakemistoa (tiedoston tila on: committed).

Eli, Modified-->Staged-->Committed

3. Gitin asentaminen

Tätä harjoitustyötä varten Git asennettiin Debianiin perustuvaan Linux Light 5.2 -käyttöjärjestelmään. Asennus komentoriviltä tapahtuu komennolla:

     $ sudo apt install git-all

Asennettu versio on 2.25.1.

Gitin asetuksia säädetään komennolla:

      $ git config

Tämän testin tarkoituksia varten tehtiin kaksi perusmuutosta.

      $ git config --global user.name "Ih0v"
      $ git config --global user.email "ilkka.vuorikuru@gmail.com"

"Global" attribuutilla kerrotaan, että muutos vaikuttaa kaikkiin saman käyttäjän repositoryihin eikä vain paikalliskoneella sijaitseviin.

Käyttäjänimi "Ih0v" sen sijaan on luotu jo aiemmin www.github.com -alustalle, jonne luodaan myös harjoitusrepository.

Identiteettiä koskevien asetusten lisäksi Gitille voi määritellä käytettävän editorin, mikäli Git jonkin komennon yhteydessä tarvitsee sellaista.

      $ git config --global core.editor emacs

4. gitin käyttö

Kun Git on asennettu ja määritelty käyttöön, voidaan ryhtyä valmistelemaan versiokontrollia.

Tätä harjoitusta varten luodaan hakemisto:

    /~dev/jyu/Digijohdanto/githarjoitus

hakemistoon githarjoitus/ viedään lopuksi tämä tiedosto (git_digitut.txt).

Gitille voidaan luoda repository joko paikallisesti johonkin hakemistoon tai repository voidana kloonata toisesta sijainnista. Tyypillisesti lähdesijainti on www.github.com:in alta löytyvä projekti mutta lähde voi olla myös muu verkkosijaiti tai vaikkapa paikallisverkossa oleva toinen tietokone.

Tärkeä on muistaa, että paikallistietokoneelta ei suoraan luoda verkkoon repositoryä vaan se ensin luodaan paikalliskoneelle ja sitten kloonataan verkkosijaintiin.

4.1. Repositoryn luomisen vaiheet

Ensin siirrytään valittuun hakemistoon ja kirjoitetaan:

      $ git init

Hakemistoon on nyt syntynyt .git-niminen alikansio. Git ei vielä toistaiseksi seuraa mitään ja onkin aika kopioida tämä työstettävä tiedosto kyseiseen työhakemistoon. On tärkeä huomata, että .git-hakemistoon ei laiteta mitään vaan siihen hakemistoon, jossa juuri äsken kirjoitettiin "git init".

Seuraavaksi /githarjoitus-kansiossa annetaan komento:

      $ git add .

"Add" lisää tiedoston tai kansion .git-hakemistoon. Edellä annettu komento määrää kaikki sen hetkisessä hakemistossa olevien tiedostojen ja kansioiden seuraamisen.

Seuraavaksi katsomme "Status" komennolla, mitä Git tällä hetkellä näkee.

      $ git status > gitkatse.txt // pelkkä git status riittää, loppuosalla otettiin talteen tuloste dokumentointia varten.

Tekstitiedostoon tallentui seuraavaa:

On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
	new file:   git_digitut.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

Ensimmäinen rivi kertoo, että olemme oksalla nimeltä master. Master-oksa on gitin oletusoksa emmekä tässä lähde sitä muuttamaan. Periaatteessa oksia voi asennella ja rakennella vapaasti.

No commits yet kertoo, ettemme ole tallentaneet yhtään muutosta eikä tiedostomme esimerkisi ole "varmuuskopioitu", koska sitä ei ole vielä viety .git-hakemistoon.

Seuraavaksi Git antaakin ohjeita, kuinka voi toimia. Se on huomannut, että tiedosto git_digitut.txt on ilmestynyt seurattavaan hakemistoon. Git kehottaa tekemään "commitin", jonka teemmekin seuraavaksi.

    $ git commit -m "Ensimmäinen tiedosto seurantaan"

Commitissa voi antaa tietoa siitä, mitä muutos on koskenut. Jos esimerkiksi joku muu tarkastelisi tätä luomaamme .git-hakemistoa, näkisi hän, että tämä "committi" tarkoitti tiedoston siirtämistä seurantaan. Lisätiedot voivat olla joskus hyvinkin tärkeitä, jos ollaan vaikkapa palauttamassa tiedostoja muutaman sadan muutoksen päähän taaksepäin.

Jos nyt kirjoitamme

    $ git status

saamme tiedon, että "nothing to commit", eli tiedostomme ovat ajantasalla.

Mikäli haluamme lisätä lisää tiedostoja seurattavaksi, onnistuu se lisäämällä lisää tiedostoja Gitin seurattavaksi.

4.2 Repositoryn etäkäyttö

Vaikka Git toimii paikallisestikin ihan hyvin, sen varsinaiset hyödyt tulevat ilmi vasta, kun Git toimii verkossa jaettuna.

Jotta paikallinen Git voidaan lisätä Githubiin, täytyy ensin luoda tyhjä repository. Tämä onnistuu luomalla käyttäjätunnus Githubiin ja klikkailemalla sieltä "New repository".

Tässä harjoituksessa luotiin seuraava tyhjä repository:

https://github.com/Ih0v/githarkka.git

Github antaa myös ohjeet, miten paikallinen Git saadaan siirrettyä Githubiin. Käytännössä se onnistu Git remote add -komennolla.

Kun Gitbubissa on valmis tyhjä Git (githarkka.git), liitetään paikallinen Git-hakemisto komennolla.

    git remote add origin https://github.com/Ih0v/githarkka.git

Komento annetaan siinä hakemisttossa, jossa gittimme sijaitsee.

Sitä seuraa komento

     git branch main

Ja lopuksi vielä "työnnetään" seuratut tiedostot Githubiin.

   git push -u origin main

"Origin" on tavanmukainen nimi paikalliselle repositorylle mutta periaatteessa nimeksi voi antaa mitä hyvänsä. "Main" tarkoittaa Githubin "pääoksaa", johon githarkka.git-repository on ripustettu.

4.3 Gitin jakaminen

Verkkorepositoryssä (githarkka.git) on nyt kaksi tiedostoa:

- gitdigitut.txt
- gitkatse.txt

Edellinen on tämä teksti ja jälkimmäinen on välitiedosto, johon ohjattiin aiemmin Gitin tuloste siirrettäväksi sitten tähän tiedostoon.

Mikäli tiedostoihin nyt ilmestyy paikallisia muutoksia, komennot git add, git commit ja git push jakautuvat nyt verkkoon.

Mikäli kuka tahansa haluaa, hän voi hakea tämän git-repositoryn itselleen komennolla

       git clone https://github.com/Ih0v/githarkka.git

Tässä esittelyssä ei paneuduta sen syvemmin Gitin yhteiskäyttöön, koska kirjoittaja harjoittelee sitä vielä itsekin. Näillä eväillä versiokontrolli kuitenkin saatiin käyntiin.
